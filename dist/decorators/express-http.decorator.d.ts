import 'reflect-metadata';
import { RequestHandler } from 'express';
import { ERouteMethods } from '../common/enums';
import { IHttpDecoratorController, IHttpDecoratorLink, IHttpDecoratorMiddleware } from '../common/interfaces';
export declare function trimPath(str: string): string;
export declare function getController(controllerClass: any): IHttpDecoratorController;
export declare function route(method: ERouteMethods, path: string, middlewares?: RequestHandler[]): (target: any, key: any) => void;
export declare function controller(basePath: string, middlewares?: IHttpDecoratorMiddleware): (target: any) => void;
export declare function request(name: string, value: any): (target: any, propertyKey: any, descriptor: TypedPropertyDescriptor<Function>) => any;
export declare function Controller(basePath: string, middlewares?: IHttpDecoratorMiddleware): (target: any) => void;
export declare function Links(array: IHttpDecoratorLink[]): (target: any, propertyKey: any, descriptor: TypedPropertyDescriptor<Function>) => any;
export declare function Docs(url: string): (target: any, propertyKey: any, descriptor: TypedPropertyDescriptor<Function>) => any;
export declare function All(path: string, middlewares?: RequestHandler[]): Function;
export declare function Get(path: string, middlewares?: RequestHandler[]): Function;
export declare function Post(path: string, middlewares?: RequestHandler[]): Function;
export declare function Patch(path: string, middlewares?: RequestHandler[]): Function;
export declare function Put(path: string, middlewares?: RequestHandler[]): Function;
export declare function Delete(path: string, middlewares?: RequestHandler[]): Function;
export declare function Options(path: string, middlewares?: RequestHandler[]): Function;
